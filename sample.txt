// import React, { useState, useEffect } from 'react';
// import type { ImmigrationProcessForm, ImmigrationCategory, ImmigrationProcess } from '../types/immigration';
// import api from '../utils/api';
// import { IMMIGRATION_END_POINTS } from '../utils/constants';

// const ImmigrationProcess: React.FC = () => {
//   const [forms, setForms] = useState<ImmigrationProcessForm[]>([]);
//   const [categories, setCategories] = useState<ImmigrationCategory[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string | null>(null);
//   const [currentStep, setCurrentStep] = useState(0);
//   const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
//   const [currentProcess, setCurrentProcess] = useState<ImmigrationProcess | null>(null);
//   const [documents, setDocuments] = useState<any[]>([]);
//   const [uploading, setUploading] = useState(false);
//   const [uploadError, setUploadError] = useState<string | null>(null);
//   const [requiredDocuments, setRequiredDocuments] = useState<any[]>([]);
//   const [formRequirements, setFormRequirements] = useState<any>(null);

//   const steps = [
//     { id: 1, name: 'Category Selection', description: 'Choose your immigration category' },
//     { id: 2, name: 'Documents', description: 'Upload required documents' },
//     { id: 3, name: 'Forms', description: 'Complete immigration forms' },
//     { id: 4, name: 'Review', description: 'Review and submit your application' },
//   ];

//   // Add icons for each category
//   const getCategoryIcon = (categoryName: string) => {
//     switch (categoryName.toLowerCase()) {
//       case 'family':
//         return (
//           <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
//           </svg>
//         );
//       case 'employment':
//         return (
//           <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
//           </svg>
//         );
//       case 'student':
//         return (
//           <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
//           </svg>
//         );
//       case 'investor':
//         return (
//           <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
//           </svg>
//         );
//       case 'refugee':
//         return (
//           <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
//           </svg>
//         );
//       default:
//         return (
//           <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
//           </svg>
//         );
//     }
//   };

//   useEffect(() => {
//     const fetchForms = async () => {
//       try {
//         setLoading(true);
//         setError(null);
        
//         const response = await api.get(IMMIGRATION_END_POINTS.GET_FORMS);
//         console.log('Forms response:', response);
//         if (response.data.success) {
//           setForms(response.data.data);
//           // Extract unique categories from forms
//           const formCategories = response.data.data.map((form: ImmigrationProcessForm) => form.category);
//           const uniqueCategories = Array.from<string>(new Set(formCategories)).map((category) => ({
//             id: category.toLowerCase().replace(/\s+/g, '_'),
//             name: category,
//             description: `Forms for ${category} immigration`,
//             icon: 'document',
//             subcategories: [],
//             allowedRoles: ['user']
//           }));
//           setCategories(uniqueCategories);
//         } else {
//           setError(response.data.message || 'Failed to load forms');
//         }
//       } catch (err) {
//         console.error('Error fetching forms:', err);
//         setError('Failed to load forms. Please try again later.');
//       } finally {
//         setLoading(false);
//       }
//     };

//     fetchForms();
//   }, []);

//   // Set required documents when form data is received
//   useEffect(() => {
//     if (formRequirements?.requiredDocuments) {
//       const docRequirements = formRequirements.requiredDocuments.map((doc: any) => ({
//         id: doc.id,
//         name: doc.name,
//         description: doc.description,
//         documentType: doc.documentType,
//         isRequired: true,
//         isUploaded: false
//       }));
//       setRequiredDocuments(docRequirements);
//     }
//   }, [formRequirements]);

//   const startProcess = async () => {
//     if (!selectedCategory) {
//       console.error('No category selected');
//       setError('Please select an immigration category first');
//       return;
//     }

//     try {
//       setLoading(true);
//       setError(null);
      
//       // Get auth token from localStorage
//       const token = localStorage.getItem('token');
//       if (!token) {
//         setError('Please login to start the process');
//         return;
//       }
      
//       // Complete request data with all required fields
//       const requestData = {
//         categoryId: selectedCategory,
//         subcategoryId: 'immediate_relative', // Default subcategory
//         visaType: 'IR1', // Default visa type
//         clientId: 'client123', // TODO: Get from auth context
//         priorityDate: new Date().toISOString().split('T')[0] // Current date in YYYY-MM-DD format
//       };

//       // Log the request data
//       console.log('Starting process with data:', requestData);
      
//       const response = await api.post(IMMIGRATION_END_POINTS.START_PROCESS, requestData, {
//         headers: {
//           'Content-Type': 'application/json',
//           'Authorization': `Bearer ${token}`
//         }
//       });

//       if (response.data.success) {
//         // Set the current process
//         const processData: ImmigrationProcess = {
//           id: response.data.data.id,
//           categoryId: selectedCategory,
//           subcategoryId: requestData.subcategoryId,
//           visaType: requestData.visaType,
//           clientId: requestData.clientId,
//           caseId: response.data.data.id,
//           priorityDate: requestData.priorityDate,
//           status: 'pending',
//           currentStep: 'documents',
//           steps: [],
//           documents: [],
//           formData: {},
//           validationResults: null,
//           createdAt: new Date().toISOString(),
//           updatedAt: new Date().toISOString()
//         };
//         setCurrentProcess(processData);
        
//         // Set the form requirements from the response
//         if (response.data.data.requiredDocuments) {
//           const docRequirements = response.data.data.requiredDocuments.map((doc: any) => ({
//             id: doc.id,
//             name: doc.name,
//             description: doc.description,
//             documentType: doc.documentType,
//             isRequired: true,
//             isUploaded: false
//           }));
//           setRequiredDocuments(docRequirements);
//           setFormRequirements(response.data.data);
//         }

//         setCurrentStep(1);
//         setDocuments([]);
//         setUploadError(null);
        
//         console.log('Process started successfully:', {
//           processId: response.data.data.id,
//           category: selectedCategory
//         });
//       } else {
//         setError(response.data.message || 'Failed to start process');
//       }
//     } catch (error: any) {
//       console.error('Error starting process:', error);
//       if (error.response?.status === 401) {
//         setError('Please login to start the process');
//       } else {
//         setError(error.response?.data?.message || 'Failed to start process. Please try again.');
//       }
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleStepChange = (stepIndex: number) => {
//     setCurrentStep(stepIndex);
//   };

//   const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
//     const files = event.target.files;
//     if (!files || files.length === 0) return;

//     // Check if process is started
//     if (!currentProcess?.id) {
//       setUploadError('Please start the immigration process first');
//       return;
//     }

//     try {
//       setUploading(true);
//       setUploadError(null);

//       // Upload each file individually
//       const uploadPromises = Array.from(files).map(async (file) => {
//         const fileFormData = new FormData();
//         fileFormData.append('file', file);
//         fileFormData.append('category', selectedCategory || '');
//         fileFormData.append('clientId', 'client123');
//         fileFormData.append('processId', currentProcess.id);
//         fileFormData.append('documentType', file.type);

//         try {
//           console.log('Uploading file:', {
//             fileName: file.name,
//             processId: currentProcess.id,
//             category: selectedCategory
//           });

//           const response = await api.post(IMMIGRATION_END_POINTS.ADD_DOCUMENT, fileFormData, {
//             headers: {
//               'Content-Type': 'multipart/form-data',
//               'Accept': 'application/json'
//             }
//           });

//           console.log('File upload response:', {
//             fileName: file.name,
//             response: response.data
//           });

//           if (!response.data.success) {
//             throw new Error(response.data.message || `Failed to upload ${file.name}`);
//           }

//           return {
//             ...response.data.data,
//             name: file.name,
//             type: file.type
//           };
//         } catch (error: any) {
//           console.error(`Error uploading ${file.name}:`, error);
//           throw new Error(`Failed to upload ${file.name}: ${error.message}`);
//         }
//       });

//       // Wait for all uploads to complete
//       const results = await Promise.all(uploadPromises);
      
//       // Update documents state with successful uploads
//       setDocuments(prev => [...prev, ...results]);
      
//       // Update required documents status
//       setRequiredDocuments(prev => 
//         prev.map(doc => ({
//           ...doc,
//           isUploaded: results.some(result => result.name === doc.name)
//         }))
//       );
      
//       setUploadError(null);

//     } catch (error: any) {
//       console.error('Upload error:', error);
//       setUploadError(error.message || 'Failed to upload documents. Please try again.');
//     } finally {
//       setUploading(false);
//     }
//   };

//   if (loading) {
//     return (
//       <div className="min-h-screen bg-gray-50 flex items-center justify-center">
//         <div className="text-center">
//           <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
//           <p className="mt-4 text-gray-600">Loading...</p>
//         </div>
//       </div>
//     );
//   }

//   if (error) {
//     return (
//       <div className="min-h-screen bg-gray-50 flex items-center justify-center">
//         <div className="text-center">
//           <div className="text-red-500 text-2xl mb-4">⚠️</div>
//           <p className="text-red-600 mb-4">{error}</p>
//           <button
//             onClick={() => window.location.reload()}
//             className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
//           >
//             Try Again
//           </button>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div className="min-h-screen bg-gray-50">
//       {/* Progress Steps */}
//       <div className="bg-white shadow-sm sticky top-0 z-10">
//         <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
//           <div className="flex justify-between items-center">
//             {steps.map((step, index) => (
//               <div
//                 key={step.id}
//                 className={`flex items-center ${
//                   index < steps.length - 1 ? 'flex-1' : ''
//                 }`}
//               >
//                 <div
//                   className={`flex items-center justify-center w-8 h-8 rounded-full ${
//                     currentStep >= index
//                       ? 'bg-primary-600 text-white'
//                       : 'bg-gray-100 text-gray-400'
//                   }`}
//                 >
//                   {step.id}
//                 </div>
//                 <div className="ml-3">
//                   <div
//                     className={`text-sm font-medium ${
//                       currentStep >= index ? 'text-primary-600' : 'text-gray-400'
//                     }`}
//                   >
//                     {step.name}
//                   </div>
//                   <div className="text-xs text-gray-400">{step.description}</div>
//                 </div>
//                 {index < steps.length - 1 && (
//                   <div
//                     className={`flex-1 h-0.5 mx-4 ${
//                       currentStep > index ? 'bg-primary-600' : 'bg-gray-100'
//                     }`}
//                   />
//                 )}
//               </div>
//             ))}
//           </div>
//         </div>
//       </div>

//       {/* Main Content */}
//       <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
//         {currentStep === 0 && (
//           <div className="space-y-8">
//             <div className="text-center">
//               <h1 className="text-3xl font-bold text-gray-900">Select Your Immigration Category</h1>
//               <p className="mt-2 text-lg text-gray-500">Choose the category that best matches your immigration needs</p>
//             </div>
            
//             <div className="grid gap-6 md:grid-cols-2">
//               {categories.map((category) => (
//                 <div
//                   key={category.id}
//                   className={`group relative p-6 rounded-xl border cursor-pointer transition-all duration-200 ${
//                     selectedCategory === category.id
//                       ? 'border-primary-500 bg-primary-50'
//                       : 'border-gray-200 hover:border-primary-300 hover:shadow-md'
//                   }`}
//                   onClick={() => setSelectedCategory(category.id)}
//                 >
//                   <div className="flex items-start space-x-4">
//                     <div className={`flex-shrink-0 w-12 h-12 rounded-lg flex items-center justify-center ${
//                       selectedCategory === category.id ? 'bg-primary-100' : 'bg-gray-100 group-hover:bg-primary-50'
//                     }`}>
//                       {getCategoryIcon(category.name)}
//                     </div>
//                     <div>
//                       <h3 className={`text-lg font-semibold ${
//                         selectedCategory === category.id ? 'text-primary-700' : 'text-gray-900'
//                       }`}>
//                         {category.name}
//                       </h3>
//                       <p className="mt-1 text-sm text-gray-500">{category.description}</p>
//                     </div>
//                   </div>
//                 </div>
//               ))}
//             </div>

//             {selectedCategory && (
//               <div className="flex justify-center">
//                 <button
//                   onClick={startProcess}
//                   className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
//                 >
//                   Start Immigration Process
//                   <svg className="ml-2 -mr-1 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
//                   </svg>
//                 </button>
//               </div>
//             )}
//           </div>
//         )}

//         {currentStep === 1 && (
//           <div className="space-y-8">
//             <div className="text-center">
//               <h1 className="text-3xl font-bold text-gray-900">Required Documents</h1>
//               <p className="mt-2 text-lg text-gray-500">Upload all necessary documents for your application</p>
//             </div>
//             <div className="bg-white rounded-xl shadow-sm p-6">
//               <div className="space-y-6">
//                 {/* Document Requirements Section */}
//                 <div className="border-b pb-4">
//                   <h2 className="text-xl font-semibold text-gray-900 mb-4">Required Documents for {selectedCategory}</h2>
                  
//                   {requiredDocuments.length > 0 ? (
//                     <div className="space-y-4">
//                       {requiredDocuments.map((doc, index) => (
//                         <div key={index} className="flex items-start space-x-3">
//                           <div className="flex-shrink-0">
//                             <svg className={`h-6 w-6 ${
//                               doc.isUploaded 
//                                 ? 'text-green-500' 
//                                 : 'text-red-500'
//                             }`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
//                             </svg>
//                           </div>
//                           <div>
//                             <h3 className={`text-lg font-medium ${
//                               doc.isUploaded ? 'text-gray-900' : 'text-red-600'
//                             }`}>
//                               {doc.name}
//                             </h3>
//                             <p className="mt-1 text-sm text-gray-500">{doc.description}</p>
//                           </div>
//                         </div>
//                       ))}
//                     </div>
//                   ) : (
//                     <p className="text-gray-500">No documents required for this form.</p>
//                   )}
//                 </div>

//                 {/* Upload Section */}
//                 <div className="mt-6">
//                   <div className="flex justify-center">
//                     <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg w-full">
//                       <div className="space-y-1 text-center">
//                         {uploading ? (
//                           <div className="flex flex-col items-center">
//                             <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
//                             <p className="mt-4 text-gray-600">Uploading documents...</p>
//                             <p className="text-sm text-gray-500 mt-2">Please do not close this window</p>
//                           </div>
//                         ) : (
//                           <>
//                             <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
//                             </svg>
//                             <div className="flex text-sm text-gray-600">
//                               <label className="relative cursor-pointer bg-white rounded-md font-medium text-primary-600 hover:text-primary-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-primary-500">
//                                 <span>Upload files</span>
//                                 <input 
//                                   type="file" 
//                                   className="sr-only" 
//                                   multiple 
//                                   onChange={handleFileUpload}
//                                   accept=".pdf,.jpg,.jpeg,.png"
//                                   disabled={uploading}
//                                 />
//                               </label>
//                               <p className="pl-1">or drag and drop</p>
//                             </div>
//                             <p className="text-xs text-gray-500">PDF, JPG, PNG up to 10MB</p>
//                           </>
//                         )}
//                       </div>
//                     </div>
//                   </div>

//                   {/* Uploaded Documents List */}
//                   {documents.length > 0 && (
//                     <div className="mt-6">
//                       <h3 className="text-lg font-medium text-gray-900 mb-4">Uploaded Documents</h3>
//                       <div className="space-y-4">
//                         {documents.map((doc, index) => (
//                           <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
//                             <div className="flex items-center space-x-3">
//                               <svg className="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
//                               </svg>
//                               <div>
//                                 <span className="text-sm text-gray-900">{doc.name}</span>
//                                 <p className="text-xs text-gray-500">{doc.type}</p>
//                               </div>
//                             </div>
//                             <span className="text-sm text-gray-500">{doc.size}</span>
//                           </div>
//                         ))}
//                       </div>
//                     </div>
//                   )}

//                   {/* Upload Error */}
//                   {uploadError && (
//                     <div className="mt-4 p-4 bg-red-50 rounded-lg">
//                       <div className="flex">
//                         <div className="flex-shrink-0">
//                           <svg className="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
//                           </svg>
//                         </div>
//                         <div className="ml-3">
//                           <p className="text-sm text-red-700">{uploadError}</p>
//                           <button
//                             onClick={() => setUploadError(null)}
//                             className="mt-2 text-sm text-red-600 hover:text-red-500"
//                           >
//                             Try Again
//                           </button>
//                         </div>
//                       </div>
//                     </div>
//                   )}
//                 </div>
//               </div>
//             </div>
//           </div>
//         )}

//         {currentStep === 2 && (
//           <div className="space-y-8">
//             <div className="text-center">
//               <h1 className="text-3xl font-bold text-gray-900">Complete Forms</h1>
//               <p className="mt-2 text-lg text-gray-500">Fill out all required immigration forms</p>
//             </div>
//             <div className="bg-white rounded-xl shadow-sm p-6">
//               {/* Form completion UI will go here */}
//               <div className="text-center py-12">
//                 <div className="mx-auto h-12 w-12 text-gray-400">
//                   <svg className="h-full w-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
//                   </svg>
//                 </div>
//                 <h3 className="mt-2 text-sm font-medium text-gray-900">No forms available</h3>
//                 <p className="mt-1 text-sm text-gray-500">Forms will be available after document upload</p>
//               </div>
//             </div>
//           </div>
//         )}

//         {currentStep === 3 && (
//           <div className="space-y-8">
//             <div className="text-center">
//               <h1 className="text-3xl font-bold text-gray-900">Review Application</h1>
//               <p className="mt-2 text-lg text-gray-500">Review your application before final submission</p>
//             </div>
//             <div className="bg-white rounded-xl shadow-sm p-6">
//               {/* Review UI will go here */}
//               <div className="text-center py-12">
//                 <div className="mx-auto h-12 w-12 text-gray-400">
//                   <svg className="h-full w-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
//                   </svg>
//                 </div>
//                 <h3 className="mt-2 text-sm font-medium text-gray-900">Application not ready for review</h3>
//                 <p className="mt-1 text-sm text-gray-500">Complete previous steps to review your application</p>
//               </div>
//             </div>
//           </div>
//         )}
//       </div>

//       {/* Add loading and error states */}
//       {loading && (
//         <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
//           <div className="bg-white rounded-lg p-6 max-w-sm w-full mx-4">
//             <div className="flex items-center justify-center">
//               <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
//             </div>
//             <p className="mt-4 text-center text-gray-700">Starting your application...</p>
//           </div>
//         </div>
//       )}

//       {error && (
//         <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
//           <div className="bg-white rounded-lg p-6 max-w-sm w-full mx-4">
//             <div className="flex items-center justify-center text-red-500 mb-4">
//               <svg className="h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
//               </svg>
//             </div>
//             <p className="text-center text-gray-700 mb-4">{error}</p>
//             <div className="flex justify-center space-x-4">
//               <button
//                 onClick={() => setError(null)}
//                 className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
//               >
//                 Try Again
//               </button>
//               <button
//                 onClick={() => window.location.reload()}
//                 className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
//               >
//                 Refresh Page
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default ImmigrationProcess; 
